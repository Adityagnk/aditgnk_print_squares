#include <iostream>
#include "ros/ros.h"
#include "geometry_msgs/Twist.h"
#include "nav_msgs/Odometry.h"
#include <iostream>
#include <cmath>
#define PI 3.14
using namespace std;
double z_val = 0.0;
double z_init=0.0;
double xPos1,yPos1,xPos2,yPos2,zPos2;
void subCallback(const nav_msgs::Odometry::ConstPtr& msg)
    {
	double xPos1=msg->pose.pose.position.x;
   	double yPos1=msg->pose.pose.position.y;
        double x=msg->pose.pose.orientation.x;
        double y=msg->pose.pose.orientation.y;
        double z=msg->pose.pose.orientation.z;
        double w=msg->pose.pose.orientation.w;
        double angle=atan2(2*(y*x+w*z),w*w+x*x-y*y-z*z);
        angle=angle+PI/1800.0;
        if(angle<0)
        {
            angle=2*PI+angle;
        }
        z_val=angle;
        if(((angle*180.0)/PI)>359.0)
        {
        z_init=z_init-2*PI;
        z_val=z_val-2*PI;
        }
        ROS_INFO("(%lf,%lf)%lf",xPos1,yPos1,angle*180.0/PI);
    }
void subCallback2(const nav_msgs::Odometry::ConstPtr& msg2)
{
        double xPos2=msg2->pose.pose.position.x;
        double yPos2=msg2->pose.pose.position.y;
        double zPos2=msg2->pose.pose.position.z;
        ROS_INFO("quadrotor-(%lf,%lf,%lf)",xPos2,yPos2,zPos2);

}
int main(int argc, char **argv)
{
ros::init(argc, argv, "publisher");
ros::NodeHandle node;
ros::Publisher pub=node.advertise<geometry_msgs::Twist>("/robot4/cmd_vel", 1000);
ros::Subscriber sub = node.subscribe<nav_msgs::Odometry>("/robot4/odom", 10, &subCallback);
ros::Subscriber sub2=node.subscribe<nav_msgs::Odometry>("/quad/ground_truth/state",10, &subCallback2);
ros::Rate loop_rate(10);
int count = 0;
xPos1=0.0;
yPos1=0.0;
xPos2=4.0;
zPos2=0.0;
yPos2=0.0;
ros::Time begin=ros::Time::now();
ros::Duration twenty(20.0);
geometry_msgs::Twist newSpeed;
while (ros::ok())
{
   if(((xPos1>=xPos2-0.4)&&(xPos1<=xPos2+0.4))&&((yPos1>=yPos2-0.4)&&(yPos1<=yPos2+0.4))&&((zPos2>=-0.2)&&(zPos2<=0.2)))
    {
        if(abs(z_val)-abs(z_init) < PI)
        {
            newSpeed.linear.x=0.0;
            newSpeed.linear.y=0.0;
            newSpeed.linear.z=0.0;
            newSpeed.angular.x=0.0;
            newSpeed.angular.y=0.0;
            newSpeed.angular.z=-0.3;
        }
        else
        {
            newSpeed.linear.x=50.0;
            newSpeed.linear.y=0.0;
            newSpeed.linear.z=0.0;
            newSpeed.angular.x=0.0;
            newSpeed.angular.y=0.0;
            newSpeed.angular.z=0.0;
        }
        pub.publish(newSpeed);
        ros::spin();
        loop_rate.sleep();
    }
    else if(((xPos1>=xPos2-0.2)&&(xPos1<=xPos2+0.2))&&((yPos1>=yPos2-0.2)&&(yPos1<=yPos2+0.2)))
    {
            if(abs(z_val)-abs(z_init) < PI/4)
            {
                newSpeed.linear.x=0.0;
                newSpeed.linear.y=0.0;
                newSpeed.linear.z=0.0;
                newSpeed.angular.x=0.0;
                newSpeed.angular.y=0.0;
                newSpeed.angular.z=-0.3;
            }
            else
            {
                newSpeed.linear.x=50.0;
                newSpeed.linear.y=0.0;
                newSpeed.linear.z=0.0;
                newSpeed.angular.x=0.0;
                newSpeed.angular.y=0.0;
                newSpeed.angular.z=0.0;
            }
            pub.publish(newSpeed);
            ros::spin();
            loop_rate.sleep();
    }
    else
    {
        



  ros::Time present=ros::Time::now();
    if((present-begin)<twenty)
    {
        newSpeed.linear.x=1.0;
        newSpeed.linear.y=0.0;
        newSpeed.linear.z=0.0;
        newSpeed.angular.x=0.0;
        newSpeed.angular.y=0.0;
        newSpeed.angular.z=0.0;
        pub.publish(newSpeed);
        ros::spinOnce();
        loop_rate.sleep();
    }
    else
    {
        if(abs(z_val)-abs(z_init) < PI/4.0 )
        {
            newSpeed.linear.x=0.0;
            newSpeed.linear.y=0.0;
            newSpeed.linear.z=0.0;
            newSpeed.angular.x=0.0;
            newSpeed.angular.y=0.0;
            newSpeed.angular.z=-0.3;
        }
        else
        {
        begin=ros::Time::now();
        z_init=z_val;
        }
    pub.publish(newSpeed);
    ros::spinOnce();
    loop_rate.sleep();
    }
}
}
return 0;
}
